import { NextRequest, NextResponse } from 'next/server';
import prisma from '../../../../lib/prisma';

/**
 * API de Ventas - Gesti√≥n completa de ventas
 * 
 * ENDPOINTS:
 * - GET /api/admin/ventas - Obtener todas las ventas o una espec√≠fica
 * - POST /api/admin/ventas - Crear nueva venta
 * 
 * FUNCIONALIDADES:
 * - Prevenci√≥n de duplicados por IDU
 * - Creaci√≥n autom√°tica de direcci√≥n si no existe
 * - Validaci√≥n de datos requeridos
 * - Logging detallado para debugging
 */

/**
 * GET - Obtener ventas
 * 
 * PAR√ÅMETROS:
 * - idUnico (opcional): Si se proporciona, busca una venta espec√≠fica
 * 
 * RESPUESTA:
 * - Sin idUnico: Lista de todas las ventas ordenadas por fecha de creaci√≥n
 * - Con idUnico: Venta espec√≠fica con su direcci√≥n incluida
 */
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const idUnico = searchParams.get('idUnico');

    if (idUnico) {
      // üîç BUSCAR VENTA ESPEC√çFICA
      console.log('üîç Buscando venta espec√≠fica con IDU:', idUnico);
      
      const venta = await prisma.venta.findFirst({
        where: { idUnico },
        include: {
          direccion: true // Incluir datos de la direcci√≥n
        }
      });

      if (!venta) {
        console.log('‚ùå Venta no encontrada para IDU:', idUnico);
        return NextResponse.json({ 
          success: false, 
          error: 'Venta no encontrada' 
        }, { status: 404 });
      }

      console.log('‚úÖ Venta encontrada:', venta.idUnico);
      return NextResponse.json({ 
        success: true, 
        venta 
      });
    } else {
      // üìã OBTENER TODAS LAS VENTAS
      console.log('üìã Obteniendo todas las ventas...');
      
      const ventas = await prisma.venta.findMany({
        include: {
          direccion: true // Incluir datos de la direcci√≥n
        },
        orderBy: {
          createdAt: 'desc' // M√°s recientes primero
        }
      });

      console.log(`‚úÖ ${ventas.length} ventas encontradas`);
      return NextResponse.json({ 
        success: true, 
        ventas 
      });
    }
  } catch (error) {
    console.error('‚ùå Error al obtener ventas:', error);
    return NextResponse.json({ 
      success: false, 
      error: 'Error al obtener ventas' 
    }, { status: 500 });
  }
}

/**
 * POST - Crear nueva venta
 * 
 * DATOS REQUERIDOS:
 * - idUnico: Identificador √∫nico de la venta (string)
 * - cantidadTimbres: Cantidad de timbres vendidos (number)
 * - monto: Monto total de la venta (number)
 * - estado: Estado de la venta (opcional, default: 'PAGADA')
 * 
 * VALIDACIONES:
 * - Verifica que no exista una venta con el mismo IDU
 * - Valida que todos los campos requeridos est√©n presentes
 * - Crea autom√°ticamente una direcci√≥n si no existe
 * 
 * PREVENCI√ìN DE DUPLICADOS:
 * - Si ya existe una venta con el IDU, retorna la existente
 * - No permite crear ventas duplicadas
 */
export async function POST(request: NextRequest) {
  try {
    console.log('üîÑ Iniciando creaci√≥n de venta...');
    
    // üì¶ PARSEAR DATOS DE ENTRADA
    const body = await request.json();
    console.log('üì¶ Datos recibidos:', body);
    
    const { idUnico, cantidadTimbres, monto, estado = 'PAGADA' } = body;

    // ‚úÖ VALIDAR DATOS REQUERIDOS
    if (!idUnico || !cantidadTimbres || !monto) {
      console.error('‚ùå Datos faltantes:', { idUnico, cantidadTimbres, monto });
      return NextResponse.json({ 
        success: false, 
        error: 'Datos faltantes: idUnico, cantidadTimbres, monto son requeridos' 
      }, { status: 400 });
    }

    // üîç VERIFICAR SI YA EXISTE UNA VENTA CON ESTE IDU
    console.log('üîç Verificando si ya existe venta con IDU:', idUnico);
    const ventaExistente = await prisma.venta.findFirst({
      where: { 
        direccion: {
          idUnico: idUnico
        }
      }
    });

    if (ventaExistente) {
      console.log('‚ö†Ô∏è Venta ya existe, retornando existente:', ventaExistente.id);
      return NextResponse.json({ 
        success: true, 
        venta: ventaExistente,
        message: 'Venta existente recuperada'
      });
    }

    console.log('‚úÖ No existe venta previa, procediendo a crear...');

    // üèóÔ∏è VERIFICAR/CREAR DIRECCI√ìN
    console.log('üîç Verificando direcci√≥n existente...');
    
    let direccion = await prisma.direccion.findUnique({
      where: { idUnico }
    });

    if (direccion) {
      console.log('‚úÖ Direcci√≥n encontrada:', direccion.nombre);
    } else {
      console.log('üèóÔ∏è Creando nueva direcci√≥n autom√°ticamente...');
      
      // Crear direcci√≥n autom√°tica si no existe
      direccion = await prisma.direccion.create({
        data: {
          idUnico,
          nombre: `Edificio ${idUnico}`,
          calle: '',
          numero: ''
        }
      });
      console.log('‚úÖ Direcci√≥n creada autom√°ticamente:', direccion.nombre);
    }

    // üí∞ CREAR NUEVA VENTA
    console.log('üí∞ Creando nueva venta...');
    
    const venta = await prisma.venta.create({
      data: {
        idUnico,
        cantidadTimbres: parseInt(cantidadTimbres),
        monto: parseInt(monto),
        estado,
        direccionId: direccion.id // Vincular con la direcci√≥n
      },
      include: {
        direccion: true // Incluir datos de la direcci√≥n en la respuesta
      }
    });

    console.log('‚úÖ Venta creada exitosamente:', {
      idUnico: venta.idUnico,
      cantidadTimbres: venta.cantidadTimbres,
      monto: venta.monto,
      estado: venta.estado
    });

    return NextResponse.json({ 
      success: true, 
      venta,
      direccion,
      message: 'Venta y direcci√≥n creadas exitosamente'
    });
  } catch (error) {
    console.error('‚ùå Error detallado al crear venta:', error);
    if (error instanceof Error) {
      console.error('‚ùå Stack trace:', error.stack);
      return NextResponse.json({ 
        success: false, 
        error: `Error al crear venta: ${error.message}` 
      }, { status: 500 });
    }
    return NextResponse.json({ 
      success: false, 
      error: 'Error desconocido al crear venta' 
    }, { status: 500 });
  }
} 